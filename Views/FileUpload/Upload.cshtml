﻿@using System.Security.Cryptography.X509Certificates
@model UploadViewModel
@{
}
<body class="custom-background-color">
@using (Html.BeginForm("Create", "FileUpload", FormMethod.Post, new { enctype = "multipart/form-data", id = "upload" }))
{
    @Html.AntiForgeryToken()
    <div class="container mt-5 col-12 col-lg-8 col-xl-6 col-xxl-6">
        <div class="row">
            <div class="col">
                <div class="custom-container bg-dark text-light">
                    <div class="row col-12">
                        bShare is a temporary file upload and share web app.<br/>
                        Details and code found at the Github link from the icon on top.<br/><br/>
                        <hr/>
                        <ul class="ps-4">
                            <li>500MB limit per upload.</li>
                            <li>File expire settings of 12, 24, and 48 hours.</li>
                            <li>QR Image generation.</li>
                            <li>(Optional) Password for file deletion before expire date.</li>
                            <li>(Optional) File Description text.</li>
                        </ul>
                        <hr/>
                    </div>
                    @*File description input*@
                    <div class="form-group pt-2">
                        <p>File Description</p>
                        @Html.TextBoxFor(model => model.FileDescription,
                            new
                            {
                                @class = "form-control file-description-width",
                                placeholder = "description here",
                                id = "fileDescription",
                                style = "width: 80%;"
                            })
                        @Html.ValidationMessageFor(model => model.FileDescription)
                    </div>

                    @*File selection*@
                    <div class="form-group pt-4">
                        <label for="files" class="control-label"></label>
                            <input type="file" id="files" name="files" multiple onchange="displaySelectedFileDetails(); handleFileInputChange();" />
                        <div id="selectedFileDetails" class="pt-4" style="display: none;">
                            <table>
                                <thead>
                                <tr>
                                    <th>File Name</th>
                                    <th>Size (MB)</th>
                                </tr>
                                </thead>
                                <tbody id="fileListBody">
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <div class="form-group pt-5">
                        <div class="row">
                            @*DateExpire selection*@
                            <div class="col-6">
                                <p>Expires in</p>
                                @Html.DropDownList("DropdownSelection", new SelectList(
                                    new List<SelectListItem>
                                    {
                                        new SelectListItem { Text = "12 Hours", Value = "12" },
                                        new SelectListItem { Text = "24 Hours", Value = "24" },
                                        new SelectListItem { Text = "48 Hours", Value = "48" },
                                    }, "Value", "Text"),
                                    new { @class = "form-control custom-width", id = "dateExpire", style = "width: 60%;" })
                            </div>
                            @*Password input*@
                            <div class="col-6">
                                <p>Password (optional)</p>
                                @Html.TextBoxFor(model => model.Password,
                                    new
                                    {
                                        @class = "form-control custom-width",
                                        maxLength = 12,
                                        onkeyup = "charUpdate()",
                                        id = "charCount",
                                        type = "password",
                                        style = "width: 50%;"
                                    })
                                @Html.ValidationMessageFor(model => model.Password)
                                <span id="charCountDisplay">0 / 12 characters</span>
                            </div>
                        </div>
                        <div class="row justify-content-center">
                            <div class="col-3 pt-3 text-end">
                                <input type="submit" value="Upload" class="btn btn-secondary"/>
                            </div>
                            <div class="col-3 pt-3 text-start">
                                <button type="button" id="resetButton" class="btn btn-secondary">Reset</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
</body>

<script>
    // Reset; clear form
    $(document).ready(function () {
        $("#resetButton").click(function () {
            $("#fileDescription").val(""); // reset file description
            $("#files").val(null); // reset file(s)
            document.getElementById('selectedFileDetails').style.display = 'none' // hide file info
            $("#charCount").val(""); // reset password
            $("#dateExpire").val("12"); // reset expiry selection
            document.getElementById('charCountDisplay').innerHTML = "0 / 12 characters"; //reset char counter
            var fileInput = document.getElementById('files'); // enable file input
            fileInput.disabled = false;
        });
    });

    // Disable file selection if already selected
    function handleFileInputChange() {
        var fileInput = document.getElementById('files');

        if (fileInput.files.length > 0) {
            // Files are selected, disable the input
            fileInput.readOnly= true;
        } else {
            // No files selected, enable the input
            fileInput.disabled = false;
        }
    }

    // Check if total selected file size is less than 500MB before form submission
    $(document).ready(function () {
        $("#upload").submit(function (e) {
            var totalSize = 0; // Total size of selected files in bytes

            // Iterate through each file input
            $("input[type='file']").each(function () {
                var files = $(this).get(0).files;

                for (var i = 0; i < files.length; i++) {
                    totalSize += files[i].size; // Add the size of each selected file
                }
            });

            // Convert total size to MB
            var totalSizeInMB = totalSize / (1024 * 1024);

            // Limit file size
            if (totalSizeInMB > 500) {
                Swal.fire({
                    title: '',
                    text: 'Total file size must be less than 500MB',
                    icon: 'error',
                });
                e.preventDefault(); // Prevent form submission
            } else if (totalSizeInMB <= 0) {
                Swal.fire({
                    title: '',
                    text: 'No files are selected',
                    icon: 'error',
                });
                e.preventDefault(); // Prevent form submission
            } else {
                Swal.fire({
                    title: 'Waiting for upload...',
                    showConfirmButton: false,
                    allowOutsideClick: false
                });
            }
        });
    });

    // Detect character input and update character count
    function charUpdate() {
        var length = document.getElementById('charCount').value.length;
        document.getElementById('charCountDisplay').innerHTML = length + " / 12 characters";
    }

    // Display file details after selection
    function displaySelectedFileDetails() {
        var filesInput = document.getElementById('files');
        var fileListBody = document.getElementById('fileListBody');

        // Clear the existing table body
        fileListBody.innerHTML = '';

        // Check if more than one file is selected
        if (filesInput.files.length > 0) {
            // Show the selectedFileDetails div
            document.getElementById('selectedFileDetails').style.display = 'block';

            // Loop through the selected files and display file name and file size
            for (var i = 0; i < filesInput.files.length; i++) {
                var file = filesInput.files[i];
                var fileName = file.name;
                var fileSize = (file.size / (1024 * 1024)).toFixed(2); // Convert to MB and round to 2 decimal places

                // Create a new table row (tr)
                var row = document.createElement('tr');

                // Create table data cells (td) for file name and file size
                var fileNameCell = document.createElement('td');
                var fileSizeCell = document.createElement('td');

                // Set the text content of the cells
                fileNameCell.textContent = fileName;
                fileSizeCell.textContent = fileSize;

                // Append the cells to the row
                row.appendChild(fileNameCell);
                row.appendChild(fileSizeCell);

                // Append the row to the table body
                fileListBody.appendChild(row);
            }
        } else {
            // Hide the selectedFileDetails div when no files are selected
            document.getElementById('selectedFileDetails').style.display = 'none';
        }
    }
</script>